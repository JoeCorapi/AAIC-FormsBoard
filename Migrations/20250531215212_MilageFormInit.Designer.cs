// <auto-generated />
using System;
using FormsBoard.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FormsBoard.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250531215212_MilageFormInit")]
    partial class MilageFormInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FormsBoard.Domain.Entities.FormStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FormStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Form is being prepared by employee",
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Form submitted for manager review",
                            Name = "Submitted"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Approved by manager, awaiting accounting review",
                            Name = "Manager Approved"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Accounting approved and completed",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Rejected for modifications",
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Form has been discarded",
                            Name = "Discarded"
                        });
                });

            modelBuilder.Entity("FormsBoard.Domain.Entities.MileageForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountantDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountantEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccountingApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("LocationClarksville")
                        .HasColumnType("bit");

                    b.Property<bool>("LocationCookeville")
                        .HasColumnType("bit");

                    b.Property<bool>("LocationCorporate")
                        .HasColumnType("bit");

                    b.Property<bool>("LocationDickson")
                        .HasColumnType("bit");

                    b.Property<bool>("LocationLenoirCity")
                        .HasColumnType("bit");

                    b.Property<bool>("LocationMaryville")
                        .HasColumnType("bit");

                    b.Property<bool>("LocationMtJuliet")
                        .HasColumnType("bit");

                    b.Property<bool>("LocationWeisgarber")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MileageRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SpecialtyAllergy")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecialtyCorporate")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecialtyInfusion")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecialtyMarketing")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecialtyNursePractitioners")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecialtyPharmacy")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecialtyPhysicians")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecialtyScheduling")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecialtySpecialtyMeds")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecialtyVaccine")
                        .HasColumnType("bit");

                    b.Property<string>("UserDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormStatusId");

                    b.ToTable("MileageForm");
                });

            modelBuilder.Entity("FormsBoard.Domain.Entities.MileageLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MileageFormId")
                        .HasColumnType("int");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalMiles")
                        .HasColumnType("int");

                    b.Property<DateTime>("TravelDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MileageFormId");

                    b.ToTable("MileageLineItem");
                });

            modelBuilder.Entity("FormsBoard.Domain.Entities.MileageForm", b =>
                {
                    b.HasOne("FormsBoard.Domain.Entities.FormStatus", "Status")
                        .WithMany()
                        .HasForeignKey("FormStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FormsBoard.Domain.Entities.MileageLineItem", b =>
                {
                    b.HasOne("FormsBoard.Domain.Entities.MileageForm", "MileageForm")
                        .WithMany("LineItems")
                        .HasForeignKey("MileageFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MileageForm");
                });

            modelBuilder.Entity("FormsBoard.Domain.Entities.MileageForm", b =>
                {
                    b.Navigation("LineItems");
                });
#pragma warning restore 612, 618
        }
    }
}
