@page "/mileageform/my"
@using Domain.Entities
@using Application.Interfaces
@using Application.Services
@inject IMileageService MileageService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<h3>My Mileage Forms</h3>

@if (forms == null)
{
    <p><em>Loading...</em></p>
}
else if (!forms.Any())
{
    <p>You don't have any mileage forms yet. <a href="mileageform/create">Create a new form</a>.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Status</th>
                <th>Total Miles</th>
                <th>Reimbursement Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var form in forms)
            {
                <tr>
                    <td>@form.DateSubmitted.ToShortDateString()</td>
                    <td>
                        <span class="@GetStatusCssClass(form.Status.Name)">
                            @form.Status.Name
                        </span>
                        @if (!string.IsNullOrEmpty(form.RejectionReason))
                        {
                            <span class="badge badge-warning ml-2" title="@form.RejectionReason">
                                <i class="oi oi-warning"></i>
                            </span>
                        }
                    </td>
                    <td>@form.TotalMileage</td>
                    <td>$@form.TotalReimbursement.ToString("F2")</td>
                    <td>
                        <a href="@($"mileageform/view/{form.Id}")" class="btn btn-sm btn-info">
                            <i class="oi oi-eye"></i> View
                        </a>

                        @if (form.FormStatusId == 1) // Draft
                        {
                            <a href="@($"mileageform/edit/{form.Id}")" class="btn btn-sm btn-primary">
                                <i class="oi oi-pencil"></i> Edit
                            </a>
                            <button class="btn btn-sm btn-success" @onclick="() => SubmitForm(form.Id)">
                                <i class="oi oi-check"></i> Submit
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(form.Id)">
                                <i class="oi oi-trash"></i> Delete
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showDeleteConfirm)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.4);" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="close" @onclick="CancelDelete">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this form?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteForm">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<MileageForm> forms;
    private string userId;
    private bool showDeleteConfirm = false;
    private int formToDeleteId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(c => c.Type == "http://schemas.microsoft.com/identity/claims/objectidentifier")?.Value;
            forms = await MileageService.GetUserFormsAsync(userId);
        }
    }

    private string GetStatusCssClass(string status)
    {
        return status switch
        {
            "Draft" => "badge badge-secondary",
            "Submitted" => "badge badge-primary",
            "Manager Approved" => "badge badge-info",
            "Accounting Approved" => "badge badge-success",
            "Paid" => "badge badge-dark",
            "Discarded" => "badge badge-danger",
            _ => "badge badge-light"
        };
    }

    private async Task SubmitForm(int formId)
    {
        await MileageService.SubmitFormAsync(formId);
        forms = await MileageService.GetUserFormsAsync(userId);
    }

    private void ConfirmDelete(int formId)
    {
        formToDeleteId = formId;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
    }

    private async Task DeleteForm()
    {
        await MileageService.DeleteFormAsync(formToDeleteId);
        showDeleteConfirm = false;
        forms = await MileageService.GetUserFormsAsync(userId);
    }
}