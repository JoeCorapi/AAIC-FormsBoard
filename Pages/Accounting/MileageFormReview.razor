@page "/accounting/mileageFormReview"
@using Domain.Entities
@using Application.Services
@using Application.Interfaces
@inject IMileageService MileageService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Accounting")]

<h3>Pending Accounting Approvals</h3>

@if (pendingForms == null)
{
    <p><em>Loading...</em></p>
}
else if (!pendingForms.Any())
{
    <p>There are no forms pending accounting approval.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Employee</th>
                <th>Approved By</th>
                <th>Total Miles</th>
                <th>Reimbursement Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var form in pendingForms)
            {
                <tr>
                    <td>@form.DateSubmitted.ToShortDateString()</td>
                    <td>@form.UserDisplayName</td>
                    <td>@form.ManagerDisplayName</td>
                    <td>@form.TotalMileage</td>
                    <td>$@form.TotalReimbursement.ToString("F2")</td>
                    <td>
                        <a href="@($"mileageform/view/{form.Id}")" class="btn btn-sm btn-info">
                            <i class="oi oi-eye"></i> View
                        </a>
                        <button class="btn btn-sm btn-success" @onclick="() => ApproveForm(form)">
                            <i class="oi oi-check"></i> Approve
                        </button>
                        <button class="btn btn-sm btn-warning" @onclick="() => ShowRejectDialog(form)">
                            <i class="oi oi-x"></i> Reject
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showRejectDialog)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.4);" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Reject Form</h5>
                    <button type="button" class="close" @onclick="CancelReject">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="rejectionReason">Please provide a reason for rejection:</label>
                        <textarea id="rejectionReason" class="form-control" rows="3" @bind="rejectionReason"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelReject">Cancel</button>
                    <button type="button" class="btn btn-warning" @onclick="RejectForm" disabled="@string.IsNullOrEmpty(rejectionReason)">
                        Reject Form
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<MileageForm> pendingForms;
    private string userId;
    private string userEmail;
    private string userDisplayName;
    private bool showRejectDialog = false;
    private MileageForm selectedForm;
    private string rejectionReason;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated && user.IsInRole("Accounting"))
        {
            userId = user.FindFirst(c => c.Type == "http://schemas.microsoft.com/identity/claims/objectidentifier")?.Value;
            userEmail = user.FindFirst(c => c.Type == "preferred_username")?.Value;
            userDisplayName = user.FindFirst(c => c.Type == "name")?.Value;

            pendingForms = await MileageService.GetFormsByStatusAsync(3); // Status 3 = Manager Approved
        }
    }

    private async Task ApproveForm(MileageForm form)
    {
        await MileageService.AccountingApproveAsync(form.Id, userId, userEmail, userDisplayName);
        pendingForms = await MileageService.GetFormsByStatusAsync(3);
    }

    private void ShowRejectDialog(MileageForm form)
    {
        selectedForm = form;
        rejectionReason = string.Empty;
        showRejectDialog = true;
    }

    private void CancelReject()
    {
        showRejectDialog = false;
        selectedForm = null;
        rejectionReason = string.Empty;
    }

    private async Task RejectForm()
    {
        if (selectedForm != null && !string.IsNullOrEmpty(rejectionReason))
        {
            await MileageService.AccountingRejectAsync(selectedForm.Id, userId, userDisplayName, rejectionReason);
            showRejectDialog = false;
            selectedForm = null;
            rejectionReason = string.Empty;
            pendingForms = await MileageService.GetFormsByStatusAsync(3);
        }
    }
}