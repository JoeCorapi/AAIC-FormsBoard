@page "/accounting/mileageFormApproved"
@using Domain.Entities
@using Application.Services
@using Application.Interfaces
@inject IMileageService MileageService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Accounting")]

<h3>Process Payments</h3>

@if (approvedForms == null)
{
    <p><em>Loading...</em></p>
}
else if (!approvedForms.Any())
{
    <p>There are no forms approved for payment.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Employee</th>
                <th>Total Miles</th>
                <th>Reimbursement Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var form in approvedForms)
            {
                <tr>
                    <td>@form.DateSubmitted.ToShortDateString()</td>
                    <td>@form.UserDisplayName</td>
                    <td>@form.TotalMileage</td>
                    <td>$@form.TotalReimbursement.ToString("F2")</td>
                    <td>
                        <a href="@($"mileageform/view/{form.Id}")" class="btn btn-sm btn-info">
                            <i class="oi oi-eye"></i> View
                        </a>
                        <button class="btn btn-sm btn-success" @onclick="() => ShowPaymentDialog(form)">
                            <i class="oi oi-credit-card"></i> Mark as Paid
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showPaymentDialog)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.4);" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Record Payment</h5>
                    <button type="button" class="close" @onclick="CancelPayment">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="paymentReference">Payment Reference (Check #, ACH #, etc.):</label>
                        <input type="text" id="paymentReference" class="form-control" @bind="paymentReference" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelPayment">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="MarkAsPaid" disabled="@string.IsNullOrEmpty(paymentReference)">
                        Mark as Paid
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<MileageForm> approvedForms;
    private bool showPaymentDialog = false;
    private MileageForm selectedForm;
    private string paymentReference;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated && user.IsInRole("Accounting"))
        {
            approvedForms = await MileageService.GetFormsByStatusAsync(4); // Status 4 = Accounting Approved
        }
    }

    private void ShowPaymentDialog(MileageForm form)
    {
        selectedForm = form;
        paymentReference = string.Empty;
        showPaymentDialog = true;
    }

    private void CancelPayment()
    {
        showPaymentDialog = false;
        selectedForm = null;
        paymentReference = string.Empty;
    }

    private async Task MarkAsPaid()
    {
        if (selectedForm != null && !string.IsNullOrEmpty(paymentReference))
        {
            await MileageService.MarkAsPaidAsync(selectedForm.Id, paymentReference);
            showPaymentDialog = false;
            selectedForm = null;
            paymentReference = string.Empty;
            approvedForms = await MileageService.GetFormsByStatusAsync(4);
        }
    }
}